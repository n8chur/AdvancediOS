# Fastlane Constants
default_platform(:ios)

# Parse Mintfile to get repo name with version numbers to run mint commands.
def mint_repo_map(repo_names) 
  repo_map = {}

  File.readlines('Mintfile').each do |line|
    repo_names.each do |repo_name|
      if line.start_with?(repo_name)
        repo_map[repo_name] = line.chomp("\n")
      end
    end
  end

  return repo_map
end
SWIFTGEN_MINT_REPO = "SwiftGen/SwiftGen"
XCODEGEN_MINT_REPO = "yonaskolb/XcodeGen"
CARTHAGE_MINT_REPO = "Carthage/Carthage"
MINT_REPOS = [
  SWIFTGEN_MINT_REPO,
  XCODEGEN_MINT_REPO,
  CARTHAGE_MINT_REPO,
]
MINT_REPO_MAP = mint_repo_map(MINT_REPOS)

TEST_DEVICE = "iPhone XS"

SWIFTGEN = "mint run #{MINT_REPO_MAP[SWIFTGEN_MINT_REPO]} swiftgen"
SWIFTGEN_CONFIG_FILENAME = "swiftgen.yml"
# The name of the folder that contains all generated SwiftGen files.
# This should be the same for all targets.
SWIFTGEN_GENERATED_FOLDER_NAME = "SwiftGen"
# The path of the folder containing the SwiftGen generated files folder relative to the target's root directory..
# This should be the same for all targets.
SWIFTGEN_GENERATED_CONTAINING_FOLDER_RELATIVE_PATH = "Source/"
# The path of the SwiftGen generated files folder relative to the target's root directory.
SWIFTGEN_GENERATED_FOLDER_RELATIVE_PATH = "#{SWIFTGEN_GENERATED_CONTAINING_FOLDER_RELATIVE_PATH}/#{SWIFTGEN_GENERATED_FOLDER_NAME}"

XCODEGEN = "mint run #{MINT_REPO_MAP[XCODEGEN_MINT_REPO]} xcodegen"

CARTHAGE = "mint run #{MINT_REPO_MAP[CARTHAGE_MINT_REPO]} carthage"

LOGGER_NAME = "Logger"
CORE_NAME = "Core"
REACTIVE_EXTENSIONS_NAME = "ReactiveExtensions"
PRESENTATIONS_NAME = "Presentations"
THEMER_NAME = "Themer"
APPLICATION_NAME = "BestPractices"
TARGETS = [
  LOGGER_NAME,
  CORE_NAME,
  REACTIVE_EXTENSIONS_NAME,
  PRESENTATIONS_NAME,
  THEMER_NAME,
  APPLICATION_NAME
]

platform :ios do

  # PUBLIC

  desc "Bootstraps the project."
  desc "This builds all dependencies and generates the project file."
  lane :bootstrap do
    sh "mint bootstrap"
    carthage_bootstrap
    generate_projects
  end

  desc "Generates all project files."
  lane :generate_projects do
    # Generate the application project.
    generate_target_project(
      target: APPLICATION_NAME
    )

    # Additionally generate a project that's used for the development workspace.
    generate_target_project(
      target: APPLICATION_NAME,
      suffix: "_Dev"
    )
  end

  desc "Runs SwiftGen for all targets."
  lane :swiftgen do
    TARGETS.each do |target|
      swiftgen_target(
        target: target
      )
    end
  end

  desc "Runs a carthage bootstrap leveraging Rome for caching."
  lane :carthage_bootstrap do
    Dir.chdir("..") do
      sh "#{CARTHAGE} checkout"
      sh "rome download --platform iOS"
      sh "rome list --missing --platform ios | awk '{print $1}' | xargs #{CARTHAGE} build --platform ios --cache-builds"
      sh "rome list --missing --platform ios | awk '{print $1}' | xargs rome upload --platform ios"
    end
  end

  desc "Updates the Cartfile.resolved based on the latest versions of each dependency according to the rules defined in the Cartfile."
  desc "This does not rebuild any depencies. Run the carthage_bootstrap afterwards to rebuild."
  lane :carthage_update do
    Dir.chdir("..") do
      sh "#{CARTHAGE} update --platform ios --no-build"
    end
  end

  desc "Runs all unit test targets in the Application project."
  desc "This will run the tests for the application as well as all internal dependencies."
  lane :test do
    TARGETS.each do |target|
      scan(
        devices: [TEST_DEVICE],
        scheme: target,
        project: "#{APPLICATION_NAME}.xcodeproj"
      )
    end
  end

  desc "Lints all the things (source and SwiftGen configs)."
  lane :lint do |options|
    lint_source
    lint_swiftgen
  end

  desc "Lints all targets source files."
  lane :lint_source do
    TARGETS.each do |target|
      lint_source_for_target(
        target: target,
        config_file: "../.swiftlint.yml"
      )
    end
  end

  desc "Lints all targets SwiftGen configs."
  lane :lint_swiftgen do
    TARGETS.each do |target|
      swiftgen_lint_target(
        target: target
      )
    end
  end

  desc "Verifies that running SwiftGen does not modify files."
  lane :verify_swiftgen do
    TARGETS.each do |target|
      verify_swiftgen_target(
        target: target
      )
    end
  end

  # PRIVATE

  desc "Generates a project from a spec defined as 'Project_<target><suffix>.yml' with options:"
  desc ":target - The target project to build."
  desc ":suffix - The suffix to use when generating the project. (default '')"
  private_lane :generate_target_project do |options|
    target = options[:target]
    suffix = options[:suffix] ? options[:suffix] : ""
    project_spec_name = "Project_#{target}#{suffix}.yml"

    UI.message "Generating project for #{target} with spec named #{project_spec_name}..."

    Dir.chdir("..") do
      sh "#{XCODEGEN} --spec #{project_spec_name}"
    end
  end

  desc "Lints a target directory with options:"
  desc ":target - The target directory to lint."
  desc ":config_file - The path to the swiftlint config file relative to the target (or the root if no target is provided)."
  private_lane :lint_source_for_target do |options|
    target = options[:target]

    UI.message "Linting source for for #{target}..."

    swiftlint(
      mode: :lint,
      strict: true,
      config_file: options[:config_file],
      path: target
    )
  end

  desc "Lints SwiftGen configs for a taget with."
  desc "This will do nothing if a switgen.yml file is not found in the root of the target."
  desc "Takes the following options:"
  desc ":target - The target directory to lint."
  private_lane :swiftgen_lint_target do |options|
    target = options[:target]

    Dir.chdir("../#{target}") do
      if File.file?(SWIFTGEN_CONFIG_FILENAME)
        UI.message "Running SwiftGen lint for #{target}..."

        sh "#{SWIFTGEN} config lint"
      else
        UI.message "Skipping SwiftGen lint for #{target}..."
      end
    end
  end

  desc "Runs SwiftGen for the provided target with options:"
  desc "This will do nothing if a switgen.yml file is not found in the root of the target."
  desc ":target - The target to run SwiftGen on."
  private_lane :swiftgen_target do |options|
    target = options[:target]

    Dir.chdir("../#{target}") do
      if File.file?(SWIFTGEN_CONFIG_FILENAME)
        UI.message "Running SwiftGen for #{target}..."

        sh SWIFTGEN
      else
        UI.message "Skipping SwiftGen for #{target}..."
      end
    end
  end

  desc "Verifies that running SwiftGen does not modify files for a target."
  desc "This lane does nothing if the target does not have a swiftgen.yml file."
  desc "Takes the following options:"
  desc ":target - The target to verify."
  private_lane :verify_swiftgen_target do |options|
    target = options[:target]

    Dir.chdir("../#{target}") do
      if File.file?(SWIFTGEN_CONFIG_FILENAME)
        UI.message "Running SwiftGen verification for #{target}..."
        dir = Dir.mktmpdir
        begin
          sh "cp -r #{SWIFTGEN_GENERATED_FOLDER_RELATIVE_PATH} #{dir}"

          swiftgen_target(
            target: target
          )
          
          begin
            sh "diff -r #{SWIFTGEN_GENERATED_FOLDER_RELATIVE_PATH} #{dir}/#{SWIFTGEN_GENERATED_FOLDER_NAME}"
          rescue => ex
            sh "cp -fr #{dir}/#{SWIFTGEN_GENERATED_FOLDER_NAME} #{SWIFTGEN_GENERATED_CONTAINING_FOLDER_RELATIVE_PATH}"
            UI.user_error!("Running SwiftGen causes mutations to generated files: \n#{ex}\n\nPlease run `fastlane swiftgen` and commit changes.")
          end
        ensure
          FileUtils.remove_entry dir
        end
      else 
        UI.message "Skipping SwiftGen verification for #{target}..."
      end
    end
  end

end
