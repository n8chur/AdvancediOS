# Fastlane Constants
default_platform(:ios)

TEST_DEVICE = "iPhone XS"

SWIFTGEN_VERSION = "6.0.2"
SWIFTGEN = "mint run SwiftGen/SwiftGen@#{SWIFTGEN_VERSION} swiftgen"
SWIFTGEN_CONFIG_FILENAME = "swiftgen.yml"
# The name of the folder that contains all generated SwiftGen files.
# This should be the same for all targets.
SWIFTGEN_GENERATED_FOLDER_NAME = "SwiftGen"
# The path of the folder containing the SwiftGen generated files folder relative to the target's root directory..
# This should be the same for all targets.
SWIFTGEN_GENERATED_CONTAINING_FOLDER_RELATIVE_PATH = "Source/"
# The path of the SwiftGen generated files folder relative to the target's root directory.
SWIFTGEN_GENERATED_FOLDER_RELATIVE_PATH = "#{SWIFTGEN_GENERATED_CONTAINING_FOLDER_RELATIVE_PATH}/#{SWIFTGEN_GENERATED_FOLDER_NAME}"

XCODEGEN_VERSION = "2.0.0"
XCODEGEN = "mint run yonaskolb/XcodeGen@#{XCODEGEN_VERSION} xcodegen"

CORE_NAME = "Core"
REACTIVE_EXTENSIONS_NAME = "ReactiveExtensions"
PRESENTATIONS_NAME = "Presentations"
APPLICATION_NAME = "BestPractices"
# Targets must be ordered such that they each element only depends on those before it, and none after it.
TARGETS = [
  CORE_NAME,
  REACTIVE_EXTENSIONS_NAME,
  PRESENTATIONS_NAME,
  APPLICATION_NAME
]

platform :ios do

  # PUBLIC

  desc "Bootstraps the project."
  desc "This builds all dependencies and generates the project file."
  lane :bootstrap do
    carthage_bootstrap
    generate_projects
    build_internal_dependencies
  end

  desc "Generates all target's project files using Xcodegen."
  lane :generate_projects do
    TARGETS.each do |target|
      generate_target_project(
        target: target
      )
    end

    # Generation Application project that is used by the workspace.
    generate_target_project(
      target: APPLICATION_NAME,
      spec_suffix: "_For_Workspace"
    )
  end

  desc "Builds all internal dependencies."
  desc "This must be run after all projects have been generated."
  lane :build_internal_dependencies do
    TARGETS.each do |target|
      build_internal_dependency(
        target: target
      )
    end
  end

  desc "Runs SwiftGen for all targets."
  lane :swiftgen do
    TARGETS.each do |target|
      swiftgen_target(
        target: target
      )
    end
  end

  desc "Runs a carthage bootstrap leveraging Rome for caching."
  lane :carthage_bootstrap do
    Dir.chdir("..") do
      sh "bundle exec carthage checkout"
      sh "bundle exec rome download --platform iOS"
      sh "bundle exec rome list --missing --platform ios | awk '{print $1}' | xargs carthage build --platform ios --cache-builds"
      sh "bundle exec rome list --missing --platform ios | awk '{print $1}' | xargs rome upload --platform ios"
    end
  end

  desc "Updates the Cartfile.resolved based on the latest versions of each dependency according to the rules defined in the Cartfile."
  desc "This does not rebuild any depencies. Run the carthage_bootstrap afterwards to rebuild."
  lane :carthage_update do
    Dir.chdir("..") do
      sh "bundle exec carthage update --platform ios --no-build"
    end
  end

  desc "Runs all unit test targets."
  lane :test do
    TARGETS.each do |target|
      scan(
        devices: [TEST_DEVICE],
        scheme: target,
        project: "#{target}/#{target}.xcodeproj"
      )
    end
  end

  desc "Lints all the things (source and SwiftGen configs)."
  lane :lint do |options|
    lint_source
    lint_swiftgen
  end

  desc "Lints all targets source files."
  lane :lint_source do
    TARGETS.each do |target|
      lint_source_for_target(
        target: target,
        config_file: "../.swiftlint.yml"
      )
    end
  end

  desc "Lints all targets SwiftGen configs."
  lane :lint_swiftgen do
    TARGETS.each do |target|
      swiftgen_lint_target(
        target: target
      )
    end
  end

  desc "Verifies that running SwiftGen does not modify files."
  lane :verify_swiftgen do
    TARGETS.each do |target|
      verify_swiftgen_target(
        target: target
      )
    end
  end

  # PRIVATE

  desc "Generates the target project file using Xcodegen with options:"
  desc ":target - The target project to build."
  desc ":spec_suffix - The suffix to use when generating the project (e.g. Project<suffix>.yml). (default '')"
  private_lane :generate_target_project do |options|
    target = options[:target]
    suffix = options[:spec_suffix] ? options[:spec_suffix] : ""
    project_spec_name = "Project#{suffix}.yml"

    UI.message "Generating project for #{target} with spec named #{project_spec_name}..."

    Dir.chdir("../#{target}") do
      sh "#{XCODEGEN} --spec #{project_spec_name}"
    end
  end

  desc "Builds the target with Carthage and adds the built framework to Carthage/Build/iOS."
  desc "This does nothing if the target is an Application target."
  desc "options:"
  desc ":target - The target to build."
  private_lane :build_internal_dependency do |options|
    target = options[:target]

    is_application = is_application_target?(
      target: target
    )
    
    if is_application == false
      UI.message "Building internal dependency #{target}..."

      Dir.chdir("../") do
        # Build the framework and move the built framework to the Carthage build folder at the root.
        # All targets share the same build folder, so in order to reference the built target it needs to be moved there.
        sh "bundle exec carthage build --no-skip-current --cache-builds --platform ios --project-directory #{target}"
        sh "rsync -a #{target}/Carthage/Build Carthage"
        sh "rm -rf #{target}/Carthage"
      end
    else
      UI.message "Skipping build of #{target} because it is an application target..."
    end 
  end

  desc "Lints a target directory with options:"
  desc ":target - The target directory to lint."
  desc ":config_file - The path to the swiftlint config file relative to the target (or the root if no target is provided)."
  private_lane :lint_source_for_target do |options|
    target = options[:target]

    UI.message "Linting source for for #{target}..."

    swiftlint(
      mode: :lint,
      strict: true,
      config_file: options[:config_file],
      path: target
    )
  end

  desc "Lints SwiftGen configs for a taget with."
  desc "This will do nothing if a switgen.yml file is not found in the root of the target."
  desc "Takes the following options:"
  desc ":target - The target directory to lint."
  private_lane :swiftgen_lint_target do |options|
    target = options[:target]

    Dir.chdir("../#{target}") do
      if File.file?(SWIFTGEN_CONFIG_FILENAME)
        UI.message "Running SwiftGen lint for #{target}..."

        sh "#{SWIFTGEN} config lint"
      else
        UI.message "Skipping SwiftGen lint for #{target}..."
      end
    end
  end

  desc "Runs SwiftGen for the provided target with options:"
  desc "This will do nothing if a switgen.yml file is not found in the root of the target."
  desc ":target - The target to run SwiftGen on."
  private_lane :swiftgen_target do |options|
    target = options[:target]

    Dir.chdir("../#{target}") do
      if File.file?(SWIFTGEN_CONFIG_FILENAME)
        UI.message "Running SwiftGen for #{target}..."

        sh SWIFTGEN
      else
        UI.message "Skipping SwiftGen for #{target}..."
      end
    end
  end

  desc "Verifies that running SwiftGen does not modify files for a target."
  desc "This lane does nothing if the target does not have a swiftgen.yml file."
  desc "Takes the following options:"
  desc ":target - The target to verify."
  lane :verify_swiftgen_target do |options|
    target = options[:target]

    Dir.chdir("../#{target}") do
      if File.file?(SWIFTGEN_CONFIG_FILENAME)
        UI.message "Running SwiftGen verification for #{target}..."
        dir = Dir.mktmpdir
        begin
          sh "cp -r #{SWIFTGEN_GENERATED_FOLDER_RELATIVE_PATH} #{dir}"

          swiftgen_target(
            target: target
          )
          
          begin
            sh "diff -r #{SWIFTGEN_GENERATED_FOLDER_RELATIVE_PATH} #{dir}/#{SWIFTGEN_GENERATED_FOLDER_NAME}"
          rescue => ex
            sh "cp -fr #{dir}/#{SWIFTGEN_GENERATED_FOLDER_NAME} #{SWIFTGEN_GENERATED_CONTAINING_FOLDER_RELATIVE_PATH}"
            UI.user_error!("Running SwiftGen causes mutations to generated files: \n#{ex}\n\nPlease run `fastlane swiftgen` and commit changes.")
          end
        ensure
          FileUtils.remove_entry dir
        end
      else 
        UI.message "Skipping SwiftGen verification for #{target}..."
      end
    end
  end

  desc "Determines whether the provided target is an application target with options:"
  desc ":target - The target name to test against."
  private_lane :is_application_target? do |options|
    options[:target] == APPLICATION_NAME
  end

end
